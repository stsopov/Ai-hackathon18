{
    "collab_server" : "",
    "contents" : "library(xgboost)\n\ndtrain <- xgb.DMatrix(data = as.matrix(dallFeatures[train.id,]), label = TV[train.id])\n\n# 0.88219\n\n\nres.list<-list()\n\nbest_score = Inf\nfor (max_depth in c(3, 4, 5, 6))\n  for (min_child_weight in c(1, 5, 9, 11))\n    for (reg_alpha in c(5))\n      for (subsample in c(0.8, 0.9)) \n        for (colsample_bytree in c(0.6, 0.7, 0.8, 0.9)) {\n          \n          \n          param <- list(  objective           = \"binary:logistic\",\n                          eval_metric = \"logloss\",\n                          booster = \"gbtree\",\n                          eta                 = 0.1, # 0.06, #0.01,\n                          max_depth           = max_depth, #changed from default of 8\\ best 3 \n                          gamma = 0,\n                          min_child_weight = min_child_weight,\n                          max_delta_step = 0,\n                          subsample = subsample,\n                          colsample_bytree = colsample_bytree,\n                          reg_alpha = reg_alpha,\n                          silent = 1,\n                          nthread = 25\n          )\n          \n          \n          results.cv <- c()\n          for(seed in c(12471, 123, 125412)) {\n            set.seed(seed)\n            \n            clf <- xgb.cv(   params              = param,\n                             data                = dtrain,\n                             nrounds             = 200, #- 180\n                             verbose             = 1,\n                             early.stop.round    = 10,\n                             watchlist           = watchlist,\n                             maximize            = F,\n                             nfold = 5\n            )\n            \n            res.fold <- min(clf$evaluation_log$test_logloss_mean)\n            print(res.fold)\n            n_iter <- which.min(clf$evaluation_log$test_logloss_mean)\n            \n            results.cv <- c(results.cv, res.fold)\n          }\n          \n          res <- mean(results.cv)\n          if (res < best_score) {\n            best_score <- res\n          }\n          cat(\"BEST: \", best_score, \"\\n\")\n          \n          res.list[[length(res.list) + 1 ]] <- c(max_depth, min_child_weight, 0, reg_alpha, subsample, colsample_bytree, res)\n        }\n\nsave(res.list, file = \"Data/pars-xgb\")",
    "created" : 1520640055081.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3686497215",
    "id" : "52FDDCAD",
    "lastKnownWriteTime" : 1520640173,
    "last_content_update" : 1520640173185,
    "path" : "~/Documents/rproj/AI-hack-gaz/Code/R/*_xgb_cv.R",
    "project_path" : "Code/R/*_xgb_cv.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}